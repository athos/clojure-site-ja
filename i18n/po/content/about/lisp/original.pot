# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2016-06-20 08:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/atoms.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/metadata.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/transients.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/datatypes.adoc:4 en/content/reference/agents.adoc:4
#: en/content/reference/protocols.adoc:4 en/content/reference/reducers.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/lazy.adoc:4
#: en/content/reference/repl_and_main.adoc:4
#: en/content/reference/transducers.adoc:4
#: en/content/reference/namespaces.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/search.adoc:4
#: en/content/about/clojureclr.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/features.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4
#: en/content/about/clojurescript.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/libraries.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/about/lisp.adoc:1
#, no-wrap
msgid "Clojure as a Dialect of Lisp"
msgstr ""

#. type: Plain text
#: en/content/about/lisp.adoc:17
msgid ""
"Clojure is a member of the Lisp family of languages. Many of the features of "
"Lisp have made it into other languages, but Lisp's approach to code-as-data "
"and its <<xref/../../reference/macros#,macro system>> still set it apart. "
"Clojure extends the code-as-data system beyond parenthesized lists (s-"
"expressions) to vectors and maps. Thus vectors and maps can be used in macro "
"syntax, have literal reader representations etc."
msgstr ""

#. type: Plain text
#: en/content/about/lisp.adoc:19
msgid ""
"Lisp data, and thus Lisp code, is read by the <<xref/../../reference/reader#,"
"reader>>. The result of reading is the data structure represented by the "
"forms. Clojure can compile data structures that represent code, and as part "
"of that process it looks for calls to macros. When it sees one, it calls the "
"macro, passing the forms themselves as arguments, then uses the return value "
"of the macro in place of the macro itself. Thus macros are functions that "
"are called at compile time to perform transformations of code. Since code is "
"data, all of the Clojure library is available to assist in the "
"transformation. Thus macros allow Lisps, and Clojure, to support syntactic "
"abstraction. You use macros for the same reasons you use functions - to "
"eliminate repetition in your code. Macros should be reserved for situations "
"for which functions are insufficient, e.g. when you need to control "
"evaluation, generate identifiers etc. Many of the core constructs of Clojure "
"are not built-in primitives but macros just like users can define. Here's "
"_**and**_:"
msgstr ""

#. type: delimited block -
#: en/content/about/lisp.adoc:28
#, no-wrap
msgid ""
"(defmacro and\n"
"  ([] true)\n"
"  ([x] x)\n"
"  ([x & rest]\n"
"    `(let [and# ~x]\n"
"       (if and# (and ~@rest) and#))))\n"
msgstr ""

#. type: Plain text
#: en/content/about/lisp.adoc:30
msgid ""
"Note the use of syntax-quote (`), which makes it easy to define macros whose "
"forms mimic the forms they generate."
msgstr ""
