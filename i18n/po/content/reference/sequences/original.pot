# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2016-06-20 08:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/atoms.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/metadata.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/transients.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/datatypes.adoc:4 en/content/reference/agents.adoc:4
#: en/content/reference/protocols.adoc:4 en/content/reference/reducers.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/lazy.adoc:4
#: en/content/reference/repl_and_main.adoc:4
#: en/content/reference/transducers.adoc:4
#: en/content/reference/namespaces.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/search.adoc:4
#: en/content/about/clojureclr.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/features.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4
#: en/content/about/clojurescript.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/libraries.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:15
#: en/content/reference/sequences.adoc:15 en/content/reference/metadata.adoc:15
#: en/content/reference/reader.adoc:13 en/content/reference/transients.adoc:16
#: en/content/reference/macros.adoc:15 en/content/reference/refs.adoc:15
#: en/content/reference/compilation.adoc:16
#: en/content/reference/other_functions.adoc:17
#: en/content/reference/other_libraries.adoc:16
#: en/content/reference/java_interop.adoc:15
#: en/content/reference/data_structures.adoc:16
#: en/content/reference/datatypes.adoc:16 en/content/reference/agents.adoc:16
#: en/content/reference/protocols.adoc:15 en/content/reference/reducers.adoc:15
#: en/content/reference/lazy.adoc:12 en/content/reference/repl_and_main.adoc:16
#: en/content/reference/transducers.adoc:15 en/content/reference/vars.adoc:16
#: en/content/reference/namespaces.adoc:15 en/content/reference/libs.adoc:16
#: en/content/reference/multimethods.adoc:15
#: en/content/about/functional_programming.adoc:15
#: en/content/about/dynamic.adoc:16 en/content/about/spec.adoc:16
#: en/content/about/rationale.adoc:13 en/content/about/state.adoc:16
#: en/content/guides/reader_conditionals.adoc:10 en/content/guides/spec.adoc:11
#: en/content/guides/destructuring.adoc:11 en/content/guides/faq.adoc:11
msgid "toc::[]"
msgstr ""

#. type: Title ==
#: en/content/reference/sequences.adoc:1 en/content/about/spec.adoc:234
#: en/content/guides/spec.adoc:172
#, no-wrap
msgid "Sequences"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:17
msgid ""
"Clojure defines many algorithms in terms of sequences (seqs). A seq is a "
"logical list, and unlike most Lisps where the list is represented by a "
"concrete, 2-slot structure, Clojure uses the ISeq interface to allow many "
"data structures to provide access to their elements as sequences. The http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/seq[seq] "
"function yields an implementation of ISeq appropriate to the collection. "
"Seqs differ from iterators in that they are persistent and immutable, not "
"stateful cursors into a collection. As such, they are useful for much more "
"than foreach - functions can consume and produce seqs, they are thread safe, "
"they can share structure etc."
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:19
msgid ""
"Most of the sequence library functions are _lazy_, i.e. functions that "
"return seqs do so incrementally, as they are consumed, and thus consume any "
"seq arguments incrementally as well. Functions returning lazy seqs can be "
"implemented using the http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/lazy-seq[lazy-seq] macro. See also <<lazy#,lazy>>."
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:21
msgid ""
"When http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"seq[seq] is used on objects that implement Iterable, the resulting sequence "
"is still immutable and persistent, and will represent a single pass across "
"the data. Because that pass might happen lazily, the pass might see changes "
"that happen after http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/seq[seq] has been called. Also, if the backing iterator is "
"subject to ConcurrentModificationException, then so too is the resulting "
"seq. When seq is used on native Java arrays, changes to the underlying array "
"will be reflected in the seq - you must copy the source array to get full "
"immutability. That said, there is still a lot of utility to using seq on "
"Iterables and arrays since seqs support multi-pass and lazy algorithms. "
"Robust programs should not mutate arrays or Iterables that have seqs on them."
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:23
msgid ""
"Many of the functions in the seq library take one or more collections, call "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/seq[seq] "
"on them, and then operate on the resulting seq. In other words, many of "
"these functions take collections but operate on their seqs."
msgstr ""

#. type: Title ==
#: en/content/reference/sequences.adoc:24
#, no-wrap
msgid "The Seq interface"
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:26
#, no-wrap
msgid "(_first_ coll)"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:28
msgid ""
"Returns the first item in the collection. Calls seq on its argument. If coll "
"is nil, returns nil."
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:29
#, no-wrap
msgid "(_rest_ coll)"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:31
msgid ""
"Returns a sequence of the items after the first. Calls seq on its argument. "
"If there are no more items, returns a logical sequence for which *seq* "
"returns nil."
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:32
#, no-wrap
msgid "(_cons_ item seq)"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:34
msgid "Returns a new seq where item is the first element and seq is the rest."
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:36
msgid ""
"For a discussion of *rest* vs. *next* and *lazy-seq* see <<lazy#,lazy>>."
msgstr ""

#. type: Title ==
#: en/content/reference/sequences.adoc:37
#, no-wrap
msgid "The Seq library"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:40
msgid ""
"This is a sampling of the primary sequence functions, grouped broadly by "
"their capabilities. Some functions can be used in different ways and so "
"appear in more than one group. There are many more listed in the http://"
"clojure.github.io/clojure/[API] section."
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:42
msgid ""
"Since Clojure 1.7, Clojure also provides <<transducers#,transducers>>, an "
"alternate model for composable transformations on collections. Transducers "
"decouple the input, processing, and output parts of transformation and allow "
"reuse of transformations in more contexts, such as core.async channels. Many "
"of the sequence functions in the list below will create transducers if the "
"input collection is omitted. See the Transducers page for more details."
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:43
#, no-wrap
msgid "Seq in, Seq out"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:53
msgid ""
"Shorter seq from a longer seq: http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/distinct[distinct] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/filter[filter] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/remove[remove] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/for[for] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/keep[keep] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/keep-"
"indexed[keep-indexed] Longer seq from a shorter seq: http://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/cons[cons] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/concat[concat] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/lazy-cat[lazy-"
"cat] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"mapcat[mapcat] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/cycle[cycle] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/interleave[interleave] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/interpose[interpose] Seq with "
"head-items missing: http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/rest[rest] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/next[next] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/fnext[fnext] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/nnext[nnext] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/drop[drop] http://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/drop-while[drop-while] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"nthnext[nthnext] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/for[for] Seq with tail-items missing: http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/take[take] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/take-nth[take-"
"nth] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"take-while[take-while] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/butlast[butlast] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/drop-last[drop-last] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/for[for] Rearrangment of a seq: "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"flatten[flatten] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/reverse[reverse] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/sort[sort] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/sort-by[sort-by] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/shuffle[shuffle] Create nested "
"seqs: http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"split-at[split-at] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/split-with[split-with] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/partition[partition] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/partition-all[partition-"
"all] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"partition-by[partition-by] Process each item of a seq to create a new seq: "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/map[map] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"pmap[pmap] http://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/mapcat[mapcat] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/for[for] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/replace[replace] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/reductions[reductions] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/map-indexed[map-indexed] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/seque[seque]"
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:54
#, no-wrap
msgid "Using a seq"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:64
msgid ""
"Extract a specific-numbered item from a seq: http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/first[first] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/ffirst[ffirst] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/nfirst[nfirst] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"second[second] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/nth[nth] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/when-first[when-first] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/last[last] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/rand-nth[rand-nth] Construct a "
"collection from a seq: http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/zipmap[zipmap] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/into[into] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/reduce[reduce] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/set[set] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/vec[vec] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/into-array[into-array] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/to-array-2d[to-"
"array-2d] http://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/frequencies[frequencies] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/group-by[group-by] Pass items of a seq as arguments to "
"a function: http://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/apply[apply] Compute a boolean from a seq: http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/not-empty[not-empty] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/some[some] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"reduce[reduce] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/seq?[seq?] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/every?[every?] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/not-every?[not-every?] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/not-any?[not-any?] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/empty?"
"[empty?] Search a seq using a predicate: http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/some[some] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/filter[filter] Force evaluation "
"of lazy seqs: http://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/doseq[doseq] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/dorun[dorun] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/doall[doall] Check if lazy seqs have been forcibly "
"evaluated: http://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/realized?[realized?]"
msgstr ""

#. type: Title ===
#: en/content/reference/sequences.adoc:65
#, no-wrap
msgid "Creating a seq"
msgstr ""

#. type: Plain text
#: en/content/reference/sequences.adoc:71
msgid ""
"Lazy seq from collection: http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/seq[seq] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/vals[vals] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/keys[keys] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/rseq[rseq] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/subseq[subseq] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/rsubseq[rsubseq] Lazy seq from "
"producer function: http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/lazy-seq[lazy-seq] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/repeatedly[repeatedly] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/iterate[iterate] Lazy "
"seq from constant: http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/repeat[repeat] http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/range[range] Lazy seq from other objects: http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/line-seq[line-"
"seq] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"resultset-seq[resultset-seq] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/re-seq[re-seq] http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/tree-seq[tree-seq] http://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/file-seq[file-seq] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/xml-seq[xml-"
"seq] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"iterator-seq[iterator-seq] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/enumeration-seq[enumeration-seq]"
msgstr ""
